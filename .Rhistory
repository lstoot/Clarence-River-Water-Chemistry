labs(x = "Zone", y = "Sr87:Sr86", title = "", fill = "Zone", colour = "Zone") +
scale_fill_manual(values = c(cmocean('phase')(6)[1:5])) +
scale_colour_manual(values = cmocean('thermal')(15)[1:5]) +
theme(axis.text.x = element_blank()) +
theme(legend.text = element_text(size=9)) +
theme(legend.title = element_text(size=9), legend.position = "bottom") +
geom_errorbar(data = Zone.means, aes(x = Zone, y = Sr87.86.Mean,
ymin = Sr87.86.Mean - Sr87.86.SD,
ymax = Sr87.86.Mean + Sr87.86.SD),
size = 0.2, width = 0.2, alpha = 0.5)
Sr.87.86.avs
#Let's merge them all together
Ba.Ca.avs + Fe.Ca.avs + Mn.Ca.avs + Mg.Ca.avs + Sr.Ca.avs + Sr.87.86.avs + plot_annotation(tag_levels = 'a') + (plot_layout(guides = 'collect')) & theme(legend.position = 'bottom')
#and let's save it for the manuscript :)
ggsave("Output/Mean_Plots_TraceElementRatios.png", width = 25, height = 17, units = "cm")
#Load up all the packages we need
library(rgdal)
library(raster)
library(ggplot2)
library(cmocean)
library(cowplot)
library(tidyverse)
library(patchwork)
library(sf)
library(ggsn)
library(plotrix)
library(dplyr)
#------------------------------------- #
# Pre-processing the data for Figure 1 #
#--------------------------------------#
#Let's load in the data
setwd("~/GitHub/Water_Chemistry/")
water <- read.csv("Input/Locations.csv")
head(water)
# Reorder plotting order
water$Zone <- factor(water$Zone, levels = c("Estuary - Lower Clarence", "Orara", "Clarence main stem", "Mann - Nymboida - Boyd", "Northern tributaries"))
# Load catchment shapefile:
catch <- st_read("Input/shapefile/MultiAttributeClarence.shp") # Use sf package (keep projection!)
head(catch)
catch[catch$LandCode == "f5k",]
catchrivers <- catch[catch$LandCode == "f5k",]
class(catchrivers)
catchrivers
catch[catch$LandCode == "f5b",]
lake <- catch[catch$LandCode == "f5b",]
class(lake)
lake
catch[catch$LandCode == "f5a",]
sriv <- catch[catch$LandCode == "f5a",]
class(sriv)
sriv
#-------------------------------------------------------------#
#                   Creating Figure 1                         #
#-------------------------------------------------------------#
# Map water sampling locations in the Clarence - Figure 1A
sf_use_s2(FALSE)
plotA <- ggplot() + theme_bw() +
geom_sf(data = catchrivers, fill = 'gray60', alpha = 0.4,  size = 0.07, colour = "black") +
geom_sf(data = lake, fill = 'gray60', alpha = 0.4,  size = 0.07, colour = "black") +
geom_sf(data = sriv, fill = 'gray60', alpha = 0.4,  size = 0.07, colour = "black") +
geom_point(data = water, aes(x = Long, y = Lat, fill = Zone), size = 2.0, pch = 21, stroke = 0.2) +
coord_sf(xlim = c(151.65, 153.5), ylim = c(-28.25, -30.5), expand = FALSE) +
scale_fill_manual(values = c(cmocean('phase')(6)[1:5])) +
scale_colour_manual(values = cmocean('thermal')(15)[1:5]) +
labs(x = "Longitude", y = "Latitude", fill = "Zone",
colour = "Zone") +
guides(fill = guide_legend(ncol = 1)) +
ggsn::scalebar(x.min = 153, x.max = 153.35, y.min = -30.30, y.max = -30.37, transform = TRUE,
box.fill = c("black", "white"), box.color = "black", st.color = "black",
dist_unit = "km", dist = 10, st.dist = 1.0, st.size = 3, height = 0.50, border.size = 0.3)
plotA
library(ozmaps) # create Australian map with clarence location
library(cowplot) # plot both maps on top of each other
#map of Australia
oz_states <- ozmaps::ozmap_states
oz_states
library(dplyr)
oz_states %>%
filter(NAME != "Other Territories") -> oz_mainland
m1 <- ggplot(oz_mainland) +
geom_sf(aes(fill = FALSE), lwd = 0.1,
show.legend = FALSE) +
scale_fill_manual(values = c("White"))
m1 #this makes the map
# Average Clarence coordinate
mean(spatial$Latitude)
mean(spatial$Longitude)
#Australia map with red rectangle around the Clarence catchment
m2 <- m1 + theme_void() +
theme(plot.background = element_rect(fill = 'white', colour = "black", size = 0.6, linetype = 'solid')) +
annotate("rect", xmin = 152.45 , xmax = 153.4 , ymin = -29.85 , ymax = -29.3 , fill = NA, color = "red")
m2 #this is the Australia map with a rectangle around the area of interest
# to merge the site map with the Australia map
m3 <- ggdraw() +
draw_plot(plotA) +
draw_plot(m2, x = 0.4315, y = 0.7655, width = 0.22, height = 0.22) + plot_annotation(plot_annotation(title = 'a'))
m3
#To save a copy of the map
ggsave("Output/Map_clarence_watersamples.png", width = 25, height = 17, units = 'cm')
#--------------------------------------------------------------------------#
#                               Geology                                    #
# -------------------------------------------------------------------------#
#Let's load up the geology of the area
geo <- st_read("Input/shapefile/rock_units2.shp", stringsAsFactors = TRUE) # Use sf package (keep projection!)
head(geo)
class(geo)
str(geo)
#we're going to map 3 different layers (Dominant_L, NSW_CODE and Age_Medial)
#Remember to change the name of the layer in all below (ie: NSW_CODE), as well and the the total colour #s (ie: 239 vs 38)
#First we need to find how many "level" are in each "layer"
class(geo$Province)
str(geo$Province)
levels(geo$Province)
unique(geo$Province)
#Now need to make it a factor & see how long it is
geo$Province<- as.factor(geo$Province)
summary(geo$Province)
length(levels(geo$Province))
#Overlapping geology and sites (Province)
sf_use_s2(FALSE)
geoplot <- ggplot() + theme_bw() +
geom_sf(data = geo, aes(fill = as.factor(geo$Province)), alpha = 0.5, size = 0.3, show.legend = "fill") +
#geom_sf(data = catchrivers, fill = 'gray60', alpha = 0.4,  size = 0.07, colour = "black") +
#geom_sf(data = lake, fill = 'gray60', alpha = 0.4,  size = 0.07, colour = "black") +
#geom_sf(data = sriv, fill = 'gray60', alpha = 0.4,  size = 0.07, colour = "black") +
geom_point(data = water, aes(x = Long, y = Lat), size = 1.5, pch = 21, stroke = 0.2, colour = 'black', fill = 'black') +
coord_sf(xlim = c(151.65, 153.5), ylim = c(-28.25, -30.5), expand = FALSE) +
scale_fill_manual(values = rainbow(5)[1:5]) +
scale_colour_manual(values = rainbow(5)[1:5]) +
labs(x = "Longitude", y = "Latitude",
colour = "Province", fill = "Province") +
guides(fill = guide_legend(ncol = 1), guide_legend(title = "Province")) +
ggsn::scalebar(x.min = 153, x.max = 153.3, y.min = -30.30, y.max = -30.35, transform = TRUE,
box.fill = c("black", "white"), box.color = "black", st.color = "black",
dist_unit = "km", dist = 10, st.dist = 1.0, st.size = 3, height = 0.30, border.size = 0.3) + plot_annotation(title = 'b')
geoplot
ggsave("Output/Map_clarence_Province.png", width = 25, height = 17, units = 'cm')
#Merging sampling locations (1a) and geology (1b)
m3 + geoplot + plot_annotation(subtitle = 'a') + (plot_layout(guides = 'collect'))
ggsave("Output/Map_clarence_Figure1COMPLETE.png", width = 30, height = 23, units = 'cm')
# to merge the site map with the Australia map
m3 <- ggdraw() +
draw_plot(plotA) +
draw_plot(m2, x = 0.4315, y = 0.7600, width = 0.22, height = 0.22) + plot_annotation(plot_annotation(title = 'a'))
m3
#To save a copy of the map
ggsave("Output/Map_clarence_watersamples.png", width = 25, height = 17, units = 'cm')
# to merge the site map with the Australia map
m3 <- ggdraw() +
draw_plot(plotA) +
draw_plot(m2, x = 0.4315, y = 0.7700, width = 0.22, height = 0.22) + plot_annotation(plot_annotation(title = 'a'))
m3
#To save a copy of the map
ggsave("Output/Map_clarence_watersamples.png", width = 25, height = 17, units = 'cm')
# to merge the site map with the Australia map
m3 <- ggdraw() +
draw_plot(plotA) +
draw_plot(m2, x = 0.4315, y = 0.7695, width = 0.22, height = 0.22) + plot_annotation(plot_annotation(title = 'a'))
m3
#To save a copy of the map
ggsave("Output/Map_clarence_watersamples.png", width = 25, height = 17, units = 'cm')
# to merge the site map with the Australia map
m3 <- ggdraw() +
draw_plot(plotA) +
draw_plot(m2, x = 0.4315, y = 0.7705, width = 0.22, height = 0.22) + plot_annotation(plot_annotation(title = 'a'))
m3
#To save a copy of the map
ggsave("Output/Map_clarence_watersamples.png", width = 25, height = 17, units = 'cm')
# to merge the site map with the Australia map
m3 <- ggdraw() +
draw_plot(plotA) +
draw_plot(m2, x = 0.4315, y = 0.7600, width = 0.22, height = 0.22) + plot_annotation(plot_annotation(title = 'a'))
m3
# to merge the site map with the Australia map
m3 <- ggdraw() +
draw_plot(plotA) +
draw_plot(m2, x = 0.4315, y = 0.7500, width = 0.22, height = 0.22) + plot_annotation(plot_annotation(title = 'a'))
m3
#To save a copy of the map
ggsave("Output/Map_clarence_watersamples.png", width = 25, height = 17, units = 'cm')
# to merge the site map with the Australia map
m3 <- ggdraw() +
draw_plot(plotA) +
draw_plot(m2, x = 0.4315, y = 0.7100, width = 0.22, height = 0.22) + plot_annotation(plot_annotation(title = 'a'))
m3
#To save a copy of the map
ggsave("Output/Map_clarence_watersamples.png", width = 25, height = 17, units = 'cm')
# to merge the site map with the Australia map
m3 <- ggdraw() +
draw_plot(plotA) +
draw_plot(m2, x = 0.4315, y = 0.7300, width = 0.22, height = 0.22) + plot_annotation(plot_annotation(title = 'a'))
m3
#To save a copy of the map
ggsave("Output/Map_clarence_watersamples.png", width = 25, height = 17, units = 'cm')
#Australia map with red rectangle around the Clarence catchment
m2 <- m1 + theme_void() +
theme(plot.background = element_rect(fill = 'white', colour = "black", size = 0.6, linetype = 'solid')) +
annotate("rect", xmin = 152.45 , xmax = 153.4 , ymin = -29.85 , ymax = -29.3 , fill = NA, color = "red")
m2 #this is the Australia map with a rectangle around the area of interest
# to merge the site map with the Australia map
m3 <- ggdraw() +
draw_plot(plotA) +
draw_plot(m2, x = 0.4500, y = 0.7300, width = 0.22, height = 0.22) + plot_annotation(plot_annotation(title = 'a'))
m3
# to merge the site map with the Australia map
m3 <- ggdraw() +
draw_plot(plotA) +
draw_plot(m2, x = 0.4550, y = 0.7300, width = 0.22, height = 0.22) + plot_annotation(plot_annotation(title = 'a'))
m3
#To save a copy of the map
ggsave("Output/Map_clarence_watersamples.png", width = 25, height = 17, units = 'cm')
# to merge the site map with the Australia map
m3 <- ggdraw() +
draw_plot(plotA) +
draw_plot(m2, x = 0.4545, y = 0.7300, width = 0.22, height = 0.22) + plot_annotation(plot_annotation(title = 'a'))
m3
#To save a copy of the map
ggsave("Output/Map_clarence_watersamples.png", width = 25, height = 17, units = 'cm')
# to merge the site map with the Australia map
m3 <- ggdraw() +
draw_plot(plotA) +
draw_plot(m2, x = 0.4540, y = 0.7300, width = 0.22, height = 0.22) + plot_annotation(plot_annotation(title = 'a'))
m3
#To save a copy of the map
ggsave("Output/Map_clarence_watersamples.png", width = 25, height = 17, units = 'cm')
#Australia map with red rectangle around the Clarence catchment
m2 <- m1 + theme_void() +
theme(plot.background = element_rect(fill = 'white', colour = "black", size = 0.6, linetype = 'solid')) +
annotate("rect", xmin = 152.45 , xmax = 153.4 , ymin = -29.85 , ymax = -29.3 , fill = NA, color = "red")
m2 #this is the Australia map with a rectangle around the area of interest
# to merge the site map with the Australia map
m3 <- ggdraw() +
draw_plot(plotA) +
draw_plot(m2, x = 0.4540, y = 0.7400, width = 0.22, height = 0.22) + plot_annotation(plot_annotation(title = 'a'))
m3
#To save a copy of the map
ggsave("Output/Map_clarence_watersamples.png", width = 25, height = 17, units = 'cm')
# to merge the site map with the Australia map
m3 <- ggdraw() +
draw_plot(plotA) +
draw_plot(m2, x = 0.4540, y = 0.7550, width = 0.22, height = 0.22) + plot_annotation(plot_annotation(title = 'a'))
m3
#To save a copy of the map
ggsave("Output/Map_clarence_watersamples.png", width = 25, height = 17, units = 'cm')
# to merge the site map with the Australia map
m3 <- ggdraw() +
draw_plot(plotA) +
draw_plot(m2, x = 0.4540, y = 0.7580, width = 0.22, height = 0.22) + plot_annotation(plot_annotation(title = 'a'))
m3
#To save a copy of the map
ggsave("Output/Map_clarence_watersamples.png", width = 25, height = 17, units = 'cm')
# to merge the site map with the Australia map
m3 <- ggdraw() +
draw_plot(plotA) +
draw_plot(m2, x = 0.4540, y = 0.7610, width = 0.22, height = 0.22) + plot_annotation(plot_annotation(title = 'a'))
m3
#To save a copy of the map
ggsave("Output/Map_clarence_watersamples.png", width = 25, height = 17, units = 'cm')
# to merge the site map with the Australia map
m3 <- ggdraw() +
draw_plot(plotA) +
draw_plot(m2, x = 0.4540, y = 0.7630, width = 0.22, height = 0.22) + plot_annotation(plot_annotation(title = 'a'))
m3
#To save a copy of the map
ggsave("Output/Map_clarence_watersamples.png", width = 25, height = 17, units = 'cm')
# to merge the site map with the Australia map
m3 <- ggdraw() +
draw_plot(plotA) +
draw_plot(m2, x = 0.4540, y = 0.7640, width = 0.22, height = 0.22) + plot_annotation(plot_annotation(title = 'a'))
m3
#To save a copy of the map
ggsave("Output/Map_clarence_watersamples.png", width = 25, height = 17, units = 'cm')
# to merge the site map with the Australia map
m3 <- ggdraw() +
draw_plot(plotA) +
draw_plot(m2, x = 0.4540, y = 0.7650, width = 0.22, height = 0.22) + plot_annotation(plot_annotation(title = 'a'))
m3
#To save a copy of the map
ggsave("Output/Map_clarence_watersamples.png", width = 25, height = 17, units = 'cm')
# to merge the site map with the Australia map
m3 <- ggdraw() +
draw_plot(plotA) +
draw_plot(m2, x = 0.4540, y = 0.7660, width = 0.22, height = 0.22) + plot_annotation(plot_annotation(title = 'a'))
m3
#To save a copy of the map
ggsave("Output/Map_clarence_watersamples.png", width = 25, height = 17, units = 'cm')
#Australia map with red rectangle around the Clarence catchment
m2 <- m1 + theme_void() +
theme(plot.background = element_rect(fill = 'white', colour = "black", size = 0.6, linetype = 'solid')) +
annotate("rect", xmin = 152.45 , xmax = 153.4 , ymin = -29.85 , ymax = -29.3 , fill = NA, color = "red")
m2 #this is the Australia map with a rectangle around the area of interest
# to merge the site map with the Australia map
m3 <- ggdraw() +
draw_plot(plotA) +
draw_plot(m2, x = 0.4540, y = 0.7665, width = 0.22, height = 0.22) + plot_annotation(plot_annotation(title = 'a'))
m3
#To save a copy of the map
ggsave("Output/Map_clarence_watersamples.png", width = 25, height = 17, units = 'cm')
# to merge the site map with the Australia map
m3 <- ggdraw() +
draw_plot(plotA) +
draw_plot(m2, x = 0.4540, y = 0.7670, width = 0.22, height = 0.22) + plot_annotation(plot_annotation(title = 'a'))
m3
# to merge the site map with the Australia map
m3 <- ggdraw() +
draw_plot(plotA) +
draw_plot(m2, x = 0.4545, y = 0.7675, width = 0.22, height = 0.22) + plot_annotation(plot_annotation(title = 'a'))
m3
#To save a copy of the map
ggsave("Output/Map_clarence_watersamples.png", width = 25, height = 17, units = 'cm')
#Load up all the packages we need
library(rgdal)
library(raster)
library(ggplot2)
library(cmocean)
library(cowplot)
library(tidyverse)
library(patchwork)
library(sf)
library(ggsn)
library(plotrix)
library(dplyr)
#------------------------------------- #
# Pre-processing the data for Figure 1 #
#--------------------------------------#
#Let's load in the data
setwd("~/GitHub/Water_Chemistry/")
water <- read.csv("Input/Locations.csv")
head(water)
# Reorder plotting order
water$Zone <- factor(water$Zone, levels = c("Estuary - Lower Clarence", "Orara", "Clarence main stem", "Mann - Nymboida - Boyd", "Northern tributaries"))
# Load catchment shapefile:
catch <- st_read("Input/shapefile/MultiAttributeClarence.shp") # Use sf package (keep projection!)
head(catch)
catch[catch$LandCode == "f5k",]
catchrivers <- catch[catch$LandCode == "f5k",]
class(catchrivers)
catchrivers
catch[catch$LandCode == "f5b",]
lake <- catch[catch$LandCode == "f5b",]
class(lake)
lake
catch[catch$LandCode == "f5a",]
sriv <- catch[catch$LandCode == "f5a",]
class(sriv)
sriv
#2020 vs 2021
setwd("~/GitHub/Water_Chemistry")
seasons <- read.csv("Input/2020.2021.csv")
seasons
#Ba
kruskal.test(Ba ~ Year, data = seasons)
#Ba.Ca
kruskal.test(Ba.Ca ~ Zone, data = new_element)
pairwise.wilcox.test(new_element$Ba.Ca, new_element$Zone,
p.adjust.method = "none", exact = FALSE)
setwd("~/GitHub/Water_Chemistry/")
new_element <- read.csv("Input/WaterChem.Results.csv", header = T)
head(new_element)
sapply(new_element, class)
i <- c(6:24)
new_element[ , i] <- apply(new_element[ , i], 2,            # Specify own function within apply
function(x) as.numeric(as.character(x)))
sapply(new_element, class)
library(FSA)
install.packages(FSA)
install.packages(FSA)
PT = dunnTest(Temperature ~ Zone,
data=new_element,
method="none")
install.packages("FSA")
library(FSA)
kruskal.test(Temperature ~ Zone, data = new_element)
pairwise.wilcox.test(new_element$Temperature, new_element$Zone,
p.adjust.method = "none", exact = FALSE)
PT = dunnTest(Temperature ~ Zone,
data=new_element,
method="none")
PT = dunnTest(Temperature ~ Zone, data=new_element, method="none")
PT = dunnTest(Temperature ~ Zone, data=new_element, method="none", exact = FALSE)
View(new_element)
PT = dunnTest(new_element$Temperature ~ new_element$Zone, data=new_element, method="none")
PT = dunnTest(new_element$Temperature ~ new_element$Zone, data=new_element, method="none")
new_element$Zone = factor(new_element$Zone, levels = c("Estuary - Lower Clarence", "Orara", "Clarence main stem", "Mann - Nymboida - Boyd", "Northern tributaries"))
#Temperature
kruskal.test(Temperature ~ Zone, data = new_element)
PT = dunnTest(new_element$Temperature ~ new_element$Zone, data=new_element, method="none")
dunnTest(new_element$Temperature ~ new_element$Zone, data=new_element, method="none")
#2020 vs 2021
setwd("~/GitHub/Water_Chemistry")
seasons <- read.csv("Input/2020.2021.csv")
seasons
wilcox.test(seasons$Ba ~ seasons$Year, data = seasons, paired = TRUE)
wilcox.test(seasons$Ba.Ca ~ seasons$Year, data = seasons, paired = TRUE)
wilcox.test(seasons$Fe.Ca ~ seasons$Year, data = seasons, paired = TRUE)
wilcox.test(seasons$Mg.Ca ~ seasons$Year, data = seasons, paired = TRUE)
wilcox.test(seasons$Sr.Ca ~ seasons$Year, data = seasons, paired = TRUE)
#2020 vs 2021
setwd("~/GitHub/Water_Chemistry")
seasons <- read.csv("Input/2020.2021.csv")
seasons
#Sr86.87
wilcox.test(seasons$Sr.8687 ~ seasons$Year, data = seasons, paired = TRUE)
#Ba.Ca
wilcox.test(seasons$Ba.Ca ~ seasons$Year, data = seasons, paired = TRUE)
#Fe.Ca
wilcox.test(seasons$Fe.Ca ~ seasons$Year, data = seasons, paired = TRUE)
#Mg.Ca
wilcox.test(seasons$Mg.Ca ~ seasons$Year, data = seasons, paired = TRUE)
#Mn.Ca
wilcox.test(seasons$Mn.Ca ~ seasons$Year, data = seasons, paired = TRUE)
View(seasons)
#Sr.Ca
wilcox.test(seasons$Sr.Ca ~ seasons$Year, data = seasons, paired = TRUE)
#Ba.Ca
kruskal.test(Ba.Ca ~ Zone, data = new_element)
dunnTest(new_element$Ba.Ca ~ new_element$Zone, data=new_element, method="none")
kruskal.test(Ba.Ca ~ Zone, data = new_element)
dunnTest(new_element$Ba.Ca ~ new_element$Zone, data=new_element, method="none")
View(new_element)
new_element$Zone = factor(new_element$Zone, levels = c("Estuary/Lower Clarence", "Orara", "Clarence main stem", "Mann - Nymboida - Boyd", "Northern tributaries"))
View(new_element)
new_element$Zone = factor(new_element$Zone, levels = c("Estuary/Lower Clarence", "Orara", "Clarence main stem", "Mann - Nymboida - Boyd", "Northern tributaries"))
View(new_element)
setwd("~/GitHub/Water_Chemistry/")
new_element <- read.csv("Input/WaterChem.Results.csv", header = T)
head(new_element)
sapply(new_element, class)
i <- c(6:24)
new_element[ , i] <- apply(new_element[ , i], 2,            # Specify own function within apply
function(x) as.numeric(as.character(x)))
sapply(new_element, class)
View(new_element)
new_element$Zone
new_element$Zone = factor(new_element$Zone, levels = c("Estuary/Lower Clarence", "Orara", "Clarence main stem", "Mann - Nymboida - Boyd", "Northern tributaries"))
#Temperature
kruskal.test(Temperature ~ Zone, data = new_element)
dunnTest(new_element$Temperature ~ new_element$Zone, data=new_element, method="none")
View(new_element)
#Sr8687
kruskal.test(Sr87.86 ~ Zone, data = new_element)
dunnTest(new_element$Sr87.86 ~ new_element$Zone, data=new_element, method="none")
#Ba.Ca
kruskal.test(Ba.Ca ~ Zone, data = new_element)
dunnTest(new_element$Ba.Ca ~ new_element$Zone, data=new_element, method="none")
#Fe.Ca
kruskal.test(Fe.Ca ~ Zone, data = new_element)
dunnTest(new_element$Fe.Ca ~ new_element$Zone, data=new_element, method="none")
#Ba.Ca
kruskal.test(Ba.Ca ~ Zone, data = new_element)
dunnTest(new_element$Ba.Ca ~ new_element$Zone, data=new_element, method="bf")
#Ba.Ca
kruskal.test(Ba.Ca ~ Zone, data = new_element)
dunnTest(new_element$Ba.Ca ~ new_element$Zone, data=new_element, method="bonferroni")
#Ba.Ca
kruskal.test(Ba.Ca ~ Zone, data = new_element)
dunnTest(new_element$Ba.Ca ~ new_element$Zone, data=new_element, method="bonferroni")
#Ba.Ca
kruskal.test(Ba.Ca ~ Zone, data = new_element)
dunnTest(new_element$Ba.Ca ~ new_element$Zone, data=new_element, method="none")
#Ba.Ca
kruskal.test(Ba.Ca ~ Zone, data = new_element)
dunnTest(new_element$Ba.Ca ~ new_element$Zone, data=new_element, method="bonferroni")
#Ba.Ca
kruskal.test(Ba.Ca ~ Zone, data = new_element)
setwd("~/GitHub/Water_Chemistry/")
new_element <- read.csv("Input/WaterChem.Results.csv", header = T)
head(new_element)
sapply(new_element, class)
i <- c(6:24)
new_element[ , i] <- apply(new_element[ , i], 2,            # Specify own function within apply
function(x) as.numeric(as.character(x)))
sapply(new_element, class)
#Now let's see if the Zonees are different!
#Kruskal-Wallis test - non-parametric one-way ANOVA test
#Post hoc - Dunns
# no need for a p-value adjustment because there is no repeated sampling (?)
# exact = false fixes the "ties" issue and yields the same results.
new_element$Zone = factor(new_element$Zone, levels = c("Estuary/Lower Clarence", "Orara", "Clarence main stem", "Mann - Nymboida - Boyd", "Northern tributaries"))
#Ba.Ca
kruskal.test(Ba.Ca ~ Zone, data = new_element)
dunnTest(new_element$Ba.Ca ~ new_element$Zone, data=new_element, method="bonferroni")
#Ba.Ca
kruskal.test(Ba.Ca ~ Zone, data = new_element)
dunnTest(new_element$Ba.Ca ~ new_element$Zone, data=new_element, method="none")
#Fe.Ca
kruskal.test(Fe.Ca ~ Zone, data = new_element)
dunnTest(new_element$Fe.Ca ~ new_element$Zone, data=new_element, method="bonferroni")
#Mg.Ca
kruskal.test(Mg.Ca ~ Zone, data = new_element)
dunnTest(new_element$Mg.Ca ~ new_element$Zone, data=new_element, method="bonferroni")
#Sr8687
kruskal.test(Sr87.86 ~ Zone, data = new_element)
dunnTest(new_element$Sr87.86 ~ new_element$Zone, data=new_element, method="bonferroni")
#Ba.Ca
kruskal.test(Ba.Ca ~ Zone, data = new_element)
dunnTest(new_element$Ba.Ca ~ new_element$Zone, data=new_element, method="none")
#Fe.Ca
kruskal.test(Fe.Ca ~ Zone, data = new_element)
dunnTest(new_element$Fe.Ca ~ new_element$Zone, data=new_element, method="none")
#Mg.Ca
kruskal.test(Mg.Ca ~ Zone, data = new_element)
dunnTest(new_element$Mg.Ca ~ new_element$Zone, data=new_element, method="none")
#Mn.Ca
kruskal.test(Mn.Ca ~ Zone, data = new_element)
dunnTest(new_element$Mn.Ca ~ new_element$Zone, data=new_element, method="none")
#Sr.Ca
kruskal.test(Sr.Ca ~ Zone, data = new_element)
dunnTest(new_element$Ba.Sr ~ new_element$Zone, data=new_element, method="none")
#Sr.Ca
kruskal.test(Sr.Ca ~ Zone, data = new_element)
dunnTest(new_element$Sr.Ca ~ new_element$Zone, data=new_element, method="none")
